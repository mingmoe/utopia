# 集成测试/集成部署
name: CI And CD

# 设置触发事件
on:
  push:
    branches: [ master ]

    paths:
      # 防止勋章日涅夫触发CI/CD
      # 防止更新文档触发CI/CD
      - "**"
      - "!README.md"
      - "!docs/**"

  pull_request:
    branches: [ master ]

    paths:
      - "**"
      - "!README.md"
      - "!docs/**"

jobs:
  #================================================================
  # 检查提交信息
  #================================================================
  Check-Commit-Message:
    runs-on: ubuntu-22.04

    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 16

      # 安装npm包
      - name: Npm install
        run: npm install

      # 检查提交
      # 检查16次提交
      - name: Check commit
        run: |
          npx commitlint --from HEAD~15 --to HEAD --verbose

  #================================================================
  # 检查代码格式
  #================================================================
  Check-Code-Format:
    runs-on: ubuntu-22.04

    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v2

      # 检查
      - name: Validate
        run: |
          npm run check-style

  Check:
    needs: [Check-Code-Format]
    runs-on: ubuntu-22.04
    steps:
      - name: Done
        run: echo "done"

  #================================================================
  # 构建并进行单元测试
  #================================================================
  Build-And-Test-On-Linux:
    needs: [ Check ]

    strategy:
      matrix:
        mode: [ 'Debug','Release' ]
        ccompiler: ['gcc','clang']
        include:
          - cxxcompiler: g++
            ccompiler: gcc
          - cxxcompiler: clang++
            ccompiler: clang

    runs-on: ubuntu-22.04
    
    env:
      mode: ${{ matrix.mode }}
      ccompiler: ${{ matrix.ccompiler }}
      cxxcompiler: ${{ matrix.cxxcompiler }}

    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install tools
        run: |
          wget -q -O - https://files.pvs-studio.com/etc/pubkey.txt | sudo apt-key add -
          sudo wget -O /etc/apt/sources.list.d/viva64.list https://files.pvs-studio.com/etc/viva64.list
          sudo apt update
          sudo apt install pvs-studio
          pvs-studio-analyzer credentials "PVS-Studio Free" FREE-FREE-FREE-FREE

      # 编译
      - name: Build
        run: |
          git submodule update --init --recursive --depth=1 library/** cmake/**
          sudo apt -y install ninja-build
          pip install meson
          python ./library/build.py --${mode}
          mkdir build
          cd build
          cmake -S .. -B . -DCMAKE_BUILD_TYPE=${mode} -DCMAKE_C_COMPILER=${ccompiler} -DCMAKE_CXX_COMPILER=${cxxcompiler} -DU_OPT_PVS_ENABLED=ON -G Ninja
          cmake --build . -j2
          cmake --build . -j2 core.analyze || true
          cmake --build . -j2 client.analyze || true
          cmake --build . -j2 server.analyze || true

  Build-And-Test-On-Windows:
    needs: [ Check ]

    strategy:
      matrix:
        mode: [ 'Debug','Release' ]

    runs-on: windows-2022

    env: 
      mode: ${{ matrix.mode }}

    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v2

      # setup msvc
      - uses: ilammy/msvc-dev-cmd@v1

      # 编译
      - name: Build
        shell: pwsh
        run: |
          git submodule update --init --recursive --depth=1 library/** cmake/**
          $env:CC="cl.exe"
          $env:CXX="cl.exe"
          pip install meson
          python ./library/build.py "--$env:mode"
          mkdir build
          cd build
          cmake -S .. -B . -DCMAKE_BUILD_TYPE="$env:mode" -G "Visual Studio 17 2022"
          cmake --build . -j2

  #================================================================
  # 设置快照tags
  #================================================================
  Record-Version:
    runs-on: ubuntu-22.04

    # 不在PR的环境下设置tag
    if: ${{ github.event_name == 'push' }}

    # 需要能成功构建并进行单元测试
    needs: [ Build-And-Test-On-Linux, Build-And-Test-On-Windows ]

    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v2

      # 配置git
      - name: Config git
        run: |
          git config --global user.name   mingmoe
          git config --global user.email  me@kawayi.moe

      # 设置tag
      - name: Set tag
        env:
          # 版本号
          build_number: ${{ github.run_number }}

        run: |
          cmake -DU_OPT_GET_VERSION_EXIT=ON -DU_OPT_BUILD_NUMBER=${build_number} || true
          tag_version=$(cat version.txt)
          echo TAG:${tag_version}
          export GPG_TTY=$(tty)
          git tag ${tag_version}
          git push --tags
